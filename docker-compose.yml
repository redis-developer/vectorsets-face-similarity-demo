services:
  redis:
    container_name: redis
    image: "redis:alpine"
    ports:
      - 6379:6379
    volumes:
      #- redis_data:/data
      - ./database/redis-data:/data
    restart: unless-stopped

  embed-python:
    build:
      context: ./embed-python
      dockerfile: Dockerfile
    container_name: vectorsets-embed-python
    ports:
      - "8009:8009"
    volumes:
      - ./embed-python/.cache:/root/.cache
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8009/health"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s
    restart: unless-stopped

  # Backend service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        NODE_ENV: ${NODE_ENV}
    container_name: vectorsets-backend
    ports:
      - "3001:3001"
    env_file:
      - ./backend/.env.docker
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/static:/app/static
      - ./backend/node_modules/@huggingface:/app/node_modules/@huggingface
    depends_on:
      redis:
        condition: service_started
      embed-python:
        condition: service_healthy
    restart: unless-stopped

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NODE_ENV: ${NODE_ENV}
    container_name: vectorsets-frontend
    ports:
      - "3000:3000"
    env_file:
      - ./frontend/.env.docker
    depends_on:
      - backend
    restart: unless-stopped
#volumes:
#  redis_data:
